import React, { useState, useMemo } from 'react';
import { Helmet } from 'react-helmet';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Plus, Trash2, Download, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import Breadcrumbs from '@/components/Breadcrumbs';
import PageHeader from '@/components/PageHeader';

const RsvpTracker = () => {
  const { toast } = useToast();
  const [guests, setGuests] = useState([
    { id: 1, name: 'Auntie & Uncle Khan', status: 'Attending', diet: 'Halal' },
    { id: 2, name: 'Priya Sharma', status: 'Pending', diet: '' },
  ]);
  const [newGuest, setNewGuest] = useState({ name: '', status: 'Pending', diet: '' });

  const handleNewGuestChange = (field, value) => {
    setNewGuest({ ...newGuest, [field]: value });
  };

  const addGuest = () => {
    if (!newGuest.name) {
      toast({ title: "Error", description: "Guest name cannot be empty.", variant: "destructive" });
      return;
    }
    setGuests([...guests, { ...newGuest, id: Date.now() }]);
    setNewGuest({ name: '', status: 'Pending', diet: '' });
  };

  const updateGuest = (id, field, value) => {
    setGuests(guests.map(guest => guest.id === id ? { ...guest, [field]: value } : guest));
  };

  const removeGuest = (id) => {
    setGuests(guests.filter(guest => guest.id !== id));
  };

  const dashboardStats = useMemo(() => {
    const total = guests.length;
    const attending = guests.filter(g => g.status === 'Attending').length;
    const pending = guests.filter(g => g.status === 'Pending').length;
    const notAttending = guests.filter(g => g.status === 'Not Attending').length;
    const dietaryNeeds = guests.filter(g => g.diet.trim() !== '').length;
    return { total, attending, pending, notAttending, dietaryNeeds };
  }, [guests]);

  const exportToCSV = () => {
    const footer = "\n\nGenerated by Salwah Events Ltd\n07359 337887 | info@salwahevents.com";
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Name,RSVP Status,Dietary Needs\n";
    guests.forEach(guest => {
      csvContent += `"${guest.name}","${guest.status}","${guest.diet}"\n`;
    });
    csvContent += footer;

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "rsvp_dietary_tracker.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "CSV Exported!", description: "Your RSVP tracker has been downloaded." });
  };

  const breadcrumbItems = [
    { name: 'Home', link: '/' },
    { name: 'Resources', link: '/resources' },
    { name: 'RSVP & Dietary Tracker' },
  ];

  const rsvpOptions = ['Pending', 'Attending', 'Not Attending'];

  return (
    <>
      <Helmet>
        <title>RSVP & Dietary Needs Tracker | Free Tool | Salwah Events</title>
        <meta name="description" content="Free tool to track guest RSVPs and dietary requirements for your wedding. Manage your guest list and export to CSV for your caterers." />
      </Helmet>
      <div className="bg-black">
        <PageHeader title="RSVP & Dietary" gradientText="Tracker" subtitle="Manage guest responses and needs in one place." />
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="mb-8">
            <Breadcrumbs items={breadcrumbItems} />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="lg:col-span-2"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Guest List</h3>
                <div className="overflow-x-auto">
                  <table className="w-full min-w-[600px]">
                    <thead>
                      <tr className="border-b border-gold/20">
                        <th className="p-2 text-left text-white">Name</th>
                        <th className="p-2 text-left text-white">RSVP Status</th>
                        <th className="p-2 text-left text-white">Dietary Needs</th>
                        <th className="p-2 text-left text-white">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {guests.map(guest => (
                        <tr key={guest.id} className="border-b border-white/10">
                          <td className="p-2"><input type="text" value={guest.name} onChange={e => updateGuest(guest.id, 'name', e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                          <td className="p-2">
                            <select value={guest.status} onChange={e => updateGuest(guest.id, 'status', e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white">
                              {rsvpOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
                            </select>
                          </td>
                          <td className="p-2"><input type="text" value={guest.diet} onChange={e => updateGuest(guest.id, 'diet', e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                          <td className="p-2"><Button variant="ghost" size="icon" onClick={() => removeGuest(guest.id)} className="text-red-500 hover:bg-red-500/10"><Trash2 size={18} /></Button></td>
                        </tr>
                      ))}
                      <tr>
                        <td className="p-2"><input type="text" value={newGuest.name} onChange={e => handleNewGuestChange('name', e.target.value)} placeholder="New Guest Name" className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                        <td className="p-2">
                          <select value={newGuest.status} onChange={e => handleNewGuestChange('status', e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white">
                            {rsvpOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
                          </select>
                        </td>
                        <td className="p-2"><input type="text" value={newGuest.diet} onChange={e => handleNewGuestChange('diet', e.target.value)} placeholder="e.g., Vegetarian, Nut Allergy" className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                        <td className="p-2"><Button onClick={addGuest} size="icon" className="bg-gold hover:bg-gold-dark text-black"><Plus size={18} /></Button></td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="lg:col-span-1"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl sticky top-24">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Dashboard</h3>
                <div className="space-y-3">
                  <div className="flex justify-between text-lg"><span className="text-gray-300">Total Guests:</span> <span className="font-bold">{dashboardStats.total}</span></div>
                  <div className="flex justify-between text-lg"><span className="text-gray-300">Attending:</span> <span className="font-bold text-green-400">{dashboardStats.attending}</span></div>
                  <div className="flex justify-between text-lg"><span className="text-gray-300">Pending:</span> <span className="font-bold text-yellow-400">{dashboardStats.pending}</span></div>
                  <div className="flex justify-between text-lg"><span className="text-gray-300">Not Attending:</span> <span className="font-bold text-red-400">{dashboardStats.notAttending}</span></div>
                  <div className="flex justify-between text-lg"><span className="text-gray-300">With Dietary Needs:</span> <span className="font-bold">{dashboardStats.dietaryNeeds}</span></div>
                </div>
                <Button onClick={exportToCSV} className="w-full mt-6"><Download size={18} className="mr-2" /> Export to CSV</Button>
              </div>
            </motion.div>
          </div>

          <div className="mt-16 bg-[#2A2E39] p-8 rounded-xl">
            <h3 className="text-2xl font-serif font-bold text-gold mb-4">How to Use</h3>
            <ul className="list-disc list-inside space-y-2 text-gray-300">
              <li>Add guests one by one using the form at the bottom of the table.</li>
              <li>Update each guest's RSVP status and dietary needs directly in the table.</li>
              <li>The dashboard on the right will update automatically with the latest counts.</li>
              <li>Export the full list to a CSV file to share with your venue or caterers.</li>
            </ul>
            <Link to="/resources" className="inline-flex items-center mt-6 text-gold hover:text-white">
              <ArrowLeft size={18} className="mr-2" />
              Back to Resources
            </Link>
          </div>
        </div>
      </div>
    </>
  );
};

export default RsvpTracker;