import React, { useState, useMemo } from 'react';
import { Helmet } from 'react-helmet';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Plus, Trash2, Download, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import Breadcrumbs from '@/components/Breadcrumbs';
import PageHeader from '@/components/PageHeader';

const VendorScorecard = () => {
  const { toast } = useToast();
  const [vendors, setVendors] = useState([
    { id: 1, name: 'Caterer A', food: 5, reliability: 4, communication: 5, flexibility: 3, price: 4000 },
    { id: 2, name: 'Caterer B', food: 4, reliability: 5, communication: 4, flexibility: 4, price: 3500 },
  ]);
  const [weights, setWeights] = useState({ food: 0.3, reliability: 0.25, communication: 0.2, flexibility: 0.15, price: 0.1 });

  const handleWeightChange = (field, value) => {
    setWeights({ ...weights, [field]: value });
  };

  const addVendor = () => {
    setVendors([...vendors, { id: Date.now(), name: '', food: 3, reliability: 3, communication: 3, flexibility: 3, price: 0 }]);
  };

  const updateVendor = (id, field, value) => {
    setVendors(vendors.map(v => v.id === id ? { ...v, [field]: value } : v));
  };

  const removeVendor = (id) => {
    setVendors(vendors.filter(v => v.id !== id));
  };

  const calculatedScores = useMemo(() => {
    if (vendors.length === 0) return [];
    const prices = vendors.map(v => v.price).filter(p => p > 0);
    const minPrice = prices.length > 0 ? Math.min(...prices) : 0;
    const maxPrice = prices.length > 0 ? Math.max(...prices) : 0;

    let totalScoreSum = 0; // Initialize sum of totalScores for all vendors

    const updatedVendors = vendors.map(vendor => {
      let priceScore = 3; // Default score
      if (maxPrice > minPrice && vendor.price > 0) {
        priceScore = 1 + 4 * (1 - (vendor.price - minPrice) / (maxPrice - minPrice));
      } else if (prices.length === 1 && vendor.price > 0) {
        priceScore = 5;
      }

      const score =
        (vendor.food * weights.food) +
        (vendor.reliability * weights.reliability) +
        (vendor.communication * weights.communication) +
        (vendor.flexibility * weights.flexibility) +
        (priceScore * weights.price);
      
      const vendorWithScore = { ...vendor, priceScore: priceScore.toFixed(2), totalScore: score.toFixed(2) };
      totalScoreSum += score; // Add current vendor's score to the sum
      return vendorWithScore;
    });

    // If totalScoreSum is 0, it means all scores are 0, handle this case to avoid division by zero
    if (totalScoreSum === 0) return updatedVendors.sort((a, b) => b.totalScore - a.totalScore);

    return updatedVendors.sort((a, b) => b.totalScore - a.totalScore);
  }, [vendors, weights]);

  const totalWeight = Object.values(weights).reduce((sum, w) => sum + w, 0);

  const exportToCSV = () => {
    const footer = "\n\nGenerated by Salwah Events Ltd\n07359 337887 | info@salwahevents.com";
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Vendor Name,Food,Reliability,Communication,Flexibility,Price,Price Score,Total Score\n";
    calculatedScores.forEach(v => {
      csvContent += `"${v.name}","${v.food}","${v.reliability}","${v.communication}","${v.flexibility}","${v.price}","${v.priceScore}","${v.totalScore}"\n`;
    });
    csvContent += footer;

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "vendor_scorecard.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "CSV Exported!", description: "Your vendor scorecard has been downloaded." });
  };

  const breadcrumbItems = [
    { name: 'Home', link: '/' },
    { name: 'Resources', link: '/resources' },
    { name: 'Vendor Scorecard' },
  ];

  const criteria = ['food', 'reliability', 'communication', 'flexibility'];

  return (
    <>
      <Helmet>
        <title>Vendor Scorecard Tool | Free Wedding Tool | Salwah Events</title>
        <meta name="description" content="Free vendor scorecard to compare and rate wedding vendors. Adjust weights for different criteria and find the best fit for your event." />
      </Helmet>
      <div className="bg-black">
        <PageHeader title="Vendor" gradientText="Scorecard" subtitle="Compare and rate vendors to find the perfect fit." />
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="mb-8">
            <Breadcrumbs items={breadcrumbItems} />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="lg:col-span-2"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Vendors</h3>
                <div className="overflow-x-auto">
                  <table className="w-full min-w-[800px]">
                    <thead>
                      <tr className="border-b border-gold/20">
                        <th className="p-2 text-left text-white">Name</th>
                        {criteria.map(c => <th key={c} className="p-2 text-left text-white capitalize">{c}</th>)}
                        <th className="p-2 text-left text-white">Price</th>
                        <th className="p-2 text-left text-white">Score</th>
                        <th className="p-2 text-left text-white">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {calculatedScores.map(vendor => (
                        <tr key={vendor.id} className="border-b border-white/10">
                          <td className="p-2"><input type="text" value={vendor.name} onChange={e => updateVendor(vendor.id, 'name', e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                          {criteria.map(c => (
                            <td key={c} className="p-2"><input type="number" min="1" max="5" value={vendor[c]} onChange={e => updateVendor(vendor.id, c, Number(e.target.value))} className="w-16 bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                          ))}
                          <td className="p-2"><input type="number" value={vendor.price} onChange={e => updateVendor(vendor.id, 'price', Number(e.target.value))} className="w-24 bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white" /></td>
                          <td className="p-2 font-bold text-gold text-lg">{vendor.totalScore}</td>
                          <td className="p-2"><Button variant="ghost" size="icon" onClick={() => removeVendor(vendor.id)} className="text-red-500 hover:bg-red-500/10"><Trash2 size={18} /></Button></td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                <Button onClick={addVendor} className="mt-4"><Plus size={18} className="mr-2" /> Add Vendor</Button>
                <Button onClick={exportToCSV} className="mt-4 ml-4"><Download size={18} className="mr-2" /> Export CSV</Button>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="lg:col-span-1"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl sticky top-24">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Weighting</h3>
                <p className="text-gray-400 mb-4">Adjust how much each category matters. Weights must add up to 1.</p>
                <div className="space-y-4">
                  {[...criteria, 'price'].map(c => (
                    <div key={c}>
                      <label className="block text-sm font-medium text-gray-300 mb-1 capitalize">{c}</label>
                      <input type="number" step="0.01" min="0" max="1" value={weights[c]} onChange={e => handleWeightChange(c, Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    </div>
                  ))}
                </div>
                <div className={`mt-4 text-lg font-bold ${totalWeight.toFixed(2) !== '1.00' ? 'text-red-500' : 'text-green-400'}`}>
                  Total Weight: {totalWeight.toFixed(2)} / 1.00
                </div>
              </div>
            </motion.div>
          </div>

          <div className="mt-16 bg-[#2A2E39] p-8 rounded-xl">
            <h3 className="text-2xl font-serif font-bold text-gold mb-4">How to Use</h3>
            <ul className="list-disc list-inside space-y-2 text-gray-300">
              <li>Add potential vendors to the list.</li>
              <li>Score each vendor from 1 to 5 on the different criteria. Enter their quoted price.</li>
              <li>Adjust the weights on the right to reflect what's most important to you (the total must be 1).</li>
              <li>The price is automatically normalized and a final weighted score is calculated.</li>
              <li>The list sorts automatically to show the highest-scoring vendor at the top.</li>
              <li>Export your scorecard to CSV to save or share.</li>
            </ul>
            <Link to="/resources" className="inline-flex items-center mt-6 text-gold hover:text-white">
              <ArrowLeft size={18} className="mr-2" />
              Back to Resources
            </Link>
          </div>
        </div>
      </div>
    </>
  );
};

export default VendorScorecard;