import React, { useState, useMemo } from 'react';
import { Helmet } from 'react-helmet';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Plus, Trash2, Download, FileText, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import Breadcrumbs from '@/components/Breadcrumbs';
import PageHeader from '@/components/PageHeader';
import { generatePdfWithHeaderFooter } from '@/lib/pdfUtils';
import autoTable from 'jspdf-autotable';

const BudgetCalculator = () => {
  const { toast } = useToast();
  const [guestCount, setGuestCount] = useState(100);
  const [perHeadItems, setPerHeadItems] = useState([
    { id: 1, name: 'Catering', cost: 45, enabled: true },
  ]);
  const [fixedItems, setFixedItems] = useState([
    { id: 1, name: 'Venue Hire', cost: 5000, enabled: true },
    { id: 2, name: 'Stage Decor', cost: 2500, enabled: true },
    { id: 3, name: 'DJ / Entertainment', cost: 1000, enabled: true },
  ]);
  const [vat, setVat] = useState(20);
  const [serviceCharge, setServiceCharge] = useState(10);

  const handleItemChange = (id, field, value, type) => {
    const list = type === 'per-head' ? perHeadItems : fixedItems;
    const setList = type === 'per-head' ? setPerHeadItems : setFixedItems;
    setList(list.map(item => item.id === id ? { ...item, [field]: value } : item));
  };

  const addItem = (type) => {
    const list = type === 'per-head' ? perHeadItems : fixedItems;
    const setList = type === 'per-head' ? setPerHeadItems : setFixedItems;
    const newItem = { id: Date.now(), name: '', cost: 0, enabled: true };
    setList([...list, newItem]);
  };

  const removeItem = (id, type) => {
    const list = type === 'per-head' ? perHeadItems : fixedItems;
    const setList = type === 'per-head' ? setPerHeadItems : setFixedItems;
    setList(list.filter(item => item.id !== id));
  };

  const totals = useMemo(() => {
    const perHeadTotal = perHeadItems.reduce((acc, item) => item.enabled ? acc + Number(item.cost) : acc, 0);
    const fixedTotal = fixedItems.reduce((acc, item) => item.enabled ? acc + Number(item.cost) : acc, 0);
    const subtotal = (perHeadTotal * guestCount) + fixedTotal;
    const vatAmount = subtotal * (vat / 100);
    const serviceChargeAmount = subtotal * (serviceCharge / 100);
    const grandTotal = subtotal + vatAmount + serviceChargeAmount;
    return { perHeadTotal, fixedTotal, subtotal, vatAmount, serviceChargeAmount, grandTotal };
  }, [perHeadItems, fixedItems, guestCount, vat, serviceCharge]);

  const formatCurrency = (value) => new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(value);

  const exportToCSV = () => {
    const footer = "\n\nGenerated by Salwah Events Ltd\n07359 337887 | info@salwahevents.com";
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Category,Item,Cost,Enabled,Total\n";
    
    perHeadItems.forEach(item => {
      csvContent += `Per Head,${item.name},${item.cost},${item.enabled},${item.enabled ? item.cost * guestCount : 0}\n`;
    });
    fixedItems.forEach(item => {
      csvContent += `Fixed,${item.name},${item.cost},${item.enabled},${item.enabled ? item.cost : 0}\n`;
    });
    csvContent += "\n";
    csvContent += `Subtotal,,${totals.subtotal}\n`;
    csvContent += `VAT (${vat}%),,${totals.vatAmount}\n`;
    csvContent += `Service Charge (${serviceCharge}%),,${totals.serviceChargeAmount}\n`;
    csvContent += `Grand Total,,${totals.grandTotal}\n`;
    csvContent += footer;


    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "wedding_budget.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "CSV Exported!", description: "Your budget has been downloaded." });
  };

  const exportToPDF = () => {
    const doc = generatePdfWithHeaderFooter('Wedding Budget Estimate', (doc) => {
      doc.setFontSize(11);
      doc.setTextColor(100);
      doc.text(`Guest Count: ${guestCount}`, 14, 38);

      const perHeadData = perHeadItems.map(item => [item.name, formatCurrency(item.cost), item.enabled ? 'Yes' : 'No', formatCurrency(item.enabled ? item.cost * guestCount : 0)]);
      autoTable(doc, {
        startY: 45,
        head: [['Per Head Items', 'Cost/Head', 'Enabled', 'Total']],
        body: perHeadData,
        theme: 'striped',
        headStyles: { fillColor: [212, 175, 55] },
      });

      const fixedData = fixedItems.map(item => [item.name, formatCurrency(item.cost), item.enabled ? 'Yes' : 'No', formatCurrency(item.enabled ? item.cost : 0)]);
      autoTable(doc, {
        startY: (doc.lastAutoTable?.finalY || 45) + 10,
        head: [['Fixed Cost Items', 'Cost', 'Enabled', 'Total']],
        body: fixedData,
        theme: 'striped',
        headStyles: { fillColor: [212, 175, 55] },
      });

      const summaryData = [
        ['Subtotal', formatCurrency(totals.subtotal)],
        [`VAT (${vat}%)`, formatCurrency(totals.vatAmount)],
        [`Service Charge (${serviceCharge}%)`, formatCurrency(totals.serviceChargeAmount)],
        ['Grand Total', formatCurrency(totals.grandTotal)],
      ];
      autoTable(doc, {
        startY: (doc.lastAutoTable?.finalY || 45) + 10,
        body: summaryData,
        theme: 'plain',
        styles: { fontSize: 12 },
        columnStyles: { 0: { fontStyle: 'bold' } },
      });
    });

    doc.save('wedding_budget.pdf');
    toast({ title: "PDF Exported!", description: "Your budget has been downloaded." });
  };

  const breadcrumbItems = [
    { name: 'Home', link: '/' },
    { name: 'Resources', link: '/resources' },
    { name: 'Budget Calculator' },
  ];

  return (
    <>
      <Helmet>
        <title>Wedding Budget Calculator | Free Tool | Salwah Events</title>
        <meta name="description" content="Free wedding budget calculator to estimate your event costs. Factor in guest count, catering, venue, VAT, and more. Export to CSV or PDF." />
      </Helmet>
      <div className="bg-black">
        <PageHeader title="Budget" gradientText="Calculator" subtitle="Estimate your event costs with our simple tool." />
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="mb-8">
            <Breadcrumbs items={breadcrumbItems} />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="lg:col-span-2 space-y-8"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Per Head Costs</h3>
                {perHeadItems.map(item => (
                  <div key={item.id} className="grid grid-cols-12 gap-2 items-center mb-2">
                    <input type="checkbox" checked={item.enabled} onChange={(e) => handleItemChange(item.id, 'enabled', e.target.checked, 'per-head')} className="col-span-1 h-5 w-5 accent-gold" />
                    <input type="text" value={item.name} onChange={(e) => handleItemChange(item.id, 'name', e.target.value, 'per-head')} placeholder="Item Name" className="col-span-6 bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    <input type="number" value={item.cost} onChange={(e) => handleItemChange(item.id, 'cost', e.target.value, 'per-head')} placeholder="Cost" className="col-span-3 bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    <Button variant="ghost" size="icon" onClick={() => removeItem(item.id, 'per-head')} className="col-span-2 text-red-500 hover:bg-red-500/10"><Trash2 size={18} /></Button>
                  </div>
                ))}
                <Button onClick={() => addItem('per-head')} className="mt-2"><Plus size={18} className="mr-2" /> Add Item</Button>
              </div>

              <div className="bg-[#2A2E39] p-6 rounded-xl">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Fixed Costs</h3>
                {fixedItems.map(item => (
                  <div key={item.id} className="grid grid-cols-12 gap-2 items-center mb-2">
                    <input type="checkbox" checked={item.enabled} onChange={(e) => handleItemChange(item.id, 'enabled', e.target.checked, 'fixed')} className="col-span-1 h-5 w-5 accent-gold" />
                    <input type="text" value={item.name} onChange={(e) => handleItemChange(item.id, 'name', e.target.value, 'fixed')} placeholder="Item Name" className="col-span-6 bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    <input type="number" value={item.cost} onChange={(e) => handleItemChange(item.id, 'cost', e.target.value, 'fixed')} placeholder="Cost" className="col-span-3 bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    <Button variant="ghost" size="icon" onClick={() => removeItem(item.id, 'fixed')} className="col-span-2 text-red-500 hover:bg-red-500/10"><Trash2 size={18} /></Button>
                  </div>
                ))}
                <Button onClick={() => addItem('fixed')} className="mt-2"><Plus size={18} className="mr-2" /> Add Item</Button>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="lg:col-span-1 space-y-8"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl sticky top-24">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Summary</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-1">Guest Count</label>
                    <input type="number" value={guestCount} onChange={(e) => setGuestCount(Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                  </div>
                  <div className="flex gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-1">VAT (%)</label>
                      <input type="number" value={vat} onChange={(e) => setVat(Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-1">Service (%)</label>
                      <input type="number" value={serviceCharge} onChange={(e) => setServiceCharge(Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
                    </div>
                  </div>
                  <div className="border-t border-gold/20 my-4"></div>
                  <div className="space-y-2 text-lg">
                    <div className="flex justify-between"><span>Subtotal:</span> <span>{formatCurrency(totals.subtotal)}</span></div>
                    <div className="flex justify-between"><span>VAT:</span> <span>{formatCurrency(totals.vatAmount)}</span></div>
                    <div className="flex justify-between"><span>Service Charge:</span> <span>{formatCurrency(totals.serviceChargeAmount)}</span></div>
                    <div className="flex justify-between font-bold text-gold text-2xl mt-2 pt-2 border-t border-gold/20"><span>Grand Total:</span> <span>{formatCurrency(totals.grandTotal)}</span></div>
                  </div>
                  <div className="flex gap-4 mt-6">
                    <Button onClick={exportToCSV} className="w-full"><Download size={18} className="mr-2" /> CSV</Button>
                    <Button onClick={exportToPDF} className="w-full"><FileText size={18} className="mr-2" /> PDF</Button>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>

          <div className="mt-16 bg-[#2A2E39] p-8 rounded-xl">
            <h3 className="text-2xl font-serif font-bold text-gold mb-4">How to Use</h3>
            <ul className="list-disc list-inside space-y-2 text-gray-300">
              <li>Enter your estimated number of guests.</li>
              <li>Add or remove per-head and fixed-cost items using the '+' and trash icons.</li>
              <li>Enable or disable items with the checkbox to see different scenarios.</li>
              <li>Adjust the VAT and service charge percentages as needed.</li>
              <li>Your totals will update automatically in the summary panel.</li>
              <li>Export your budget as a CSV or PDF file to save or share.</li>
            </ul>
            <Link to="/resources" className="inline-flex items-center mt-6 text-gold hover:text-white">
              <ArrowLeft size={18} className="mr-2" />
              Back to Resources
            </Link>
          </div>
        </div>
      </div>
    </>
  );
};

export default BudgetCalculator;