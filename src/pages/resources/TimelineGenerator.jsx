import React, { useState } from 'react';
import { Helmet } from 'react-helmet';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Calendar, Download, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import Breadcrumbs from '@/components/Breadcrumbs';
import PageHeader from '@/components/PageHeader';

const TimelineGenerator = () => {
  const { toast } = useToast();
  const [eventDate, setEventDate] = useState(new Date().toISOString().split('T')[0]);
  const [startTime, setStartTime] = useState('14:00');
  const [bufferTime, setBufferTime] = useState(30);
  const [photoTime, setPhotoTime] = useState(60);
  const [receptionTime, setReceptionTime] = useState(120);

  const generateICS = () => {
    const formatTime = (date) => {
      return date.toISOString().replace(/-|:|\.\d\d\d/g, "");
    };

    const startDateTime = new Date(`${eventDate}T${startTime}`);
    const events = [];

    let current_time = new Date(startDateTime);

    events.push({
      title: "Guest Arrival & Welcome Drinks",
      start: new Date(current_time),
      end: new Date(current_time.setMinutes(current_time.getMinutes() + 30)),
    });

    current_time = new Date(events[events.length - 1].end);
    events.push({
      title: "Wedding Ceremony",
      start: new Date(current_time),
      end: new Date(current_time.setMinutes(current_time.getMinutes() + 60)),
    });

    current_time = new Date(events[events.length - 1].end);
    events.push({
      title: "Buffer Time / Mingle",
      start: new Date(current_time),
      end: new Date(current_time.setMinutes(current_time.getMinutes() + bufferTime)),
    });

    current_time = new Date(events[events.length - 1].end);
    events.push({
      title: "Couple & Family Photos",
      start: new Date(current_time),
      end: new Date(current_time.setMinutes(current_time.getMinutes() + photoTime)),
    });

    current_time = new Date(events[events.length - 1].end);
    events.push({
      title: "Reception & Dinner",
      start: new Date(current_time),
      end: new Date(current_time.setMinutes(current_time.getMinutes() + receptionTime)),
    });

    let icsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//SalwahEvents//WeddingTimeline//EN
`;

    events.forEach(event => {
      icsContent += `BEGIN:VEVENT
UID:${Date.now()}${Math.random()}@salwahevents.com
DTSTAMP:${formatTime(new Date())}
DTSTART:${formatTime(event.start)}
DTEND:${formatTime(event.end)}
SUMMARY:${event.title}
DESCRIPTION:Generated by Salwah Events Timeline Tool
END:VEVENT
`;
    });

    icsContent += `END:VCALENDAR`;

    const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'wedding_timeline.ics');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "ICS File Generated!", description: "Your timeline has been downloaded." });
  };

  const breadcrumbItems = [
    { name: 'Home', link: '/' },
    { name: 'Resources', link: '/resources' },
    { name: 'Timeline Generator' },
  ];

  return (
    <>
      <Helmet>
        <title>Wedding Timeline Generator (.ics) | Free Tool | Salwah Events</title>
        <meta name="description" content="Free wedding timeline generator. Create a custom run-sheet for your big day and download it as an .ics file for your calendar." />
      </Helmet>
      <div className="bg-black">
        <PageHeader title="Timeline" gradientText="Generator" subtitle="Create a downloadable run-sheet for your event." />
        
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="mb-8">
            <Breadcrumbs items={breadcrumbItems} />
          </div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="bg-[#2A2E39] p-8 rounded-xl"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Event Date</label>
                <input type="date" value={eventDate} onChange={e => setEventDate(e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Ceremony Start Time</label>
                <input type="time" value={startTime} onChange={e => setStartTime(e.target.value)} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Buffer/Mingle Time (minutes)</label>
                <input type="number" value={bufferTime} onChange={e => setBufferTime(Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Photo Session (minutes)</label>
                <input type="number" value={photoTime} onChange={e => setPhotoTime(Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-300 mb-1">Reception / Dinner (minutes)</label>
                <input type="number" value={receptionTime} onChange={e => setReceptionTime(Number(e.target.value))} className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white" />
              </div>
            </div>
            <Button onClick={generateICS} className="w-full mt-8 text-lg py-6">
              <Download size={20} className="mr-2" /> Generate & Download .ics File
            </Button>
          </motion.div>

          <div className="mt-16 bg-[#2A2E39] p-8 rounded-xl">
            <h3 className="text-2xl font-serif font-bold text-gold mb-4">How to Use</h3>
            <ul className="list-disc list-inside space-y-2 text-gray-300">
              <li>Pick your event date and the start time for the ceremony.</li>
              <li>Set the durations for key activities like photos and the reception.</li>
              <li>Click the "Generate & Download" button.</li>
              <li>An .ics file will be downloaded to your device.</li>
              <li>Import the file into your calendar (Google Calendar, Apple Calendar, Outlook) to see your run-sheet.</li>
            </ul>
            <Link to="/resources" className="inline-flex items-center mt-6 text-gold hover:text-white">
              <ArrowLeft size={18} className="mr-2" />
              Back to Resources
            </Link>
          </div>
        </div>
      </div>
    </>
  );
};

export default TimelineGenerator;