import React, { useState, useMemo } from 'react';
import { Helmet } from 'react-helmet';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Users, Trash2, Download, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import Breadcrumbs from '@/components/Breadcrumbs';
import PageHeader from '@/components/PageHeader';

const SeatingPlanner = () => {
  const { toast } = useToast();
  const [guestList, setGuestList] = useState('');
  const [guests, setGuests] = useState([]);
  const [tables, setTables] = useState([{ id: 1, name: 'Table 1', capacity: 10, guests: [] }]);

  const processGuestList = () => {
    const names = guestList.split('\n').filter(name => name.trim() !== '');
    const newGuests = names.map((name, index) => ({ id: `guest-${index}`, name: name.trim() }));
    setGuests(newGuests);
    toast({ title: "Guest List Processed", description: `${newGuests.length} guests have been added.` });
  };

  const addTable = () => {
    const newTable = { id: Date.now(), name: `Table ${tables.length + 1}`, capacity: 10, guests: [] };
    setTables([...tables, newTable]);
  };

  const updateTable = (id, field, value) => {
    setTables(tables.map(table => table.id === id ? { ...table, [field]: value } : table));
  };

  const removeTable = (id) => {
    const tableToRemove = tables.find(t => t.id === id);
    if (tableToRemove) {
      setGuests(prev => [...prev, ...tableToRemove.guests]);
    }
    setTables(tables.filter(table => table.id !== id));
  };

  const assignGuestToTable = (guestId, tableId) => {
    const guest = guests.find(g => g.id === guestId);
    if (!guest) return;

    setGuests(guests.filter(g => g.id !== guestId));
    setTables(tables.map(table => {
      if (table.id === tableId && table.guests.length < table.capacity) {
        return { ...table, guests: [...table.guests, guest] };
      }
      return table;
    }));
  };

  const unassignGuest = (guestId, tableId) => {
    const table = tables.find(t => t.id === tableId);
    if (!table) return;
    const guest = table.guests.find(g => g.id === guestId);
    if (!guest) return;

    setTables(tables.map(t => t.id === tableId ? { ...t, guests: t.guests.filter(g => g.id !== guestId) } : t));
    setGuests([guest, ...guests]);
  };

  const unassignedGuests = useMemo(() => {
    const assignedGuestIds = new Set(tables.flatMap(t => t.guests.map(g => g.id)));
    return guests.filter(g => !assignedGuestIds.has(g.id));
  }, [guests, tables]);

  const exportToCSV = () => {
    const footer = "\n\nGenerated by Salwah Events Ltd\n07359 337887 | info@salwahevents.com";
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Table Name,Guest Name\n";
    tables.forEach(table => {
      table.guests.forEach(guest => {
        csvContent += `"${table.name}","${guest.name}"\n`;
      });
    });
    if (unassignedGuests.length > 0) {
      csvContent += "Unassigned Guests,\n";
      unassignedGuests.forEach(guest => {
        csvContent += `,"${guest.name}"\n`;
      });
    }
    csvContent += footer;

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "seating_plan.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "CSV Exported!", description: "Your seating plan has been downloaded." });
  };

  const breadcrumbItems = [
    { name: 'Home', link: '/' },
    { name: 'Resources', link: '/resources' },
    { name: 'Seating Planner' },
  ];

  return (
    <>
      <Helmet>
        <title>Wedding Seating Planner | Free Tool | Salwah Events</title>
        <meta name="description" content="Free wedding seating planner tool. Paste your guest list, create tables, and assign guests. Export your plan to CSV." />
      </Helmet>
      <div className="bg-black">
        <PageHeader title="Seating" gradientText="Planner" subtitle="Organize your guests and tables with ease." />
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="mb-8">
            <Breadcrumbs items={breadcrumbItems} />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="lg:col-span-1 space-y-8"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">1. Add Guests</h3>
                <textarea
                  value={guestList}
                  onChange={(e) => setGuestList(e.target.value)}
                  placeholder="Paste guest names, one per line..."
                  rows="10"
                  className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white resize-none"
                />
                <Button onClick={processGuestList} className="w-full mt-4">Process Guest List</Button>
              </div>
              <div className="bg-[#2A2E39] p-6 rounded-xl sticky top-24">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">Unassigned Guests ({unassignedGuests.length})</h3>
                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {unassignedGuests.map(guest => (
                    <div key={guest.id} className="bg-gray-800/50 p-2 rounded-md text-white">{guest.name}</div>
                  ))}
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="lg:col-span-2 space-y-8"
            >
              <div className="bg-[#2A2E39] p-6 rounded-xl">
                <h3 className="text-2xl font-serif font-bold text-gold mb-4">2. Create Tables</h3>
                <div className="space-y-4">
                  {tables.map(table => (
                    <div key={table.id} className="bg-[#2A2E39] p-4 rounded-lg">
                      <div className="flex justify-between items-center mb-2">
                        <input
                          type="text"
                          value={table.name}
                          onChange={(e) => updateTable(table.id, 'name', e.target.value)}
                          className="bg-black/50 border border-gold/30 rounded-md px-3 py-1 text-white font-bold"
                        />
                        <div className="flex items-center gap-2">
                          <label className="text-sm">Capacity:</label>
                          <input
                            type="number"
                            value={table.capacity}
                            onChange={(e) => updateTable(table.id, 'capacity', Number(e.target.value))}
                            className="w-16 bg-black/50 border border-gold/30 rounded-md px-2 py-1 text-white"
                          />
                          <Button variant="ghost" size="icon" onClick={() => removeTable(table.id)} className="text-red-500 hover:bg-red-500/10"><Trash2 size={18} /></Button>
                        </div>
                      </div>
                      <div className="mb-2">
                        <select
                          onChange={(e) => assignGuestToTable(e.target.value, table.id)}
                          value=""
                          className="w-full bg-black/50 border border-gold/30 rounded-md px-3 py-2 text-white"
                          disabled={table.guests.length >= table.capacity}
                        >
                          <option value="">Assign a guest...</option>
                          {unassignedGuests.map(guest => <option key={guest.id} value={guest.id}>{guest.name}</option>)}
                        </select>
                      </div>
                      <div className="space-y-1">
                        {table.guests.map(guest => (
                          <div key={guest.id} className="flex justify-between items-center bg-gray-800/50 p-2 rounded-md">
                            <span className="text-white">{guest.name}</span>
                            <Button variant="ghost" size="icon" onClick={() => unassignGuest(guest.id, table.id)} className="text-yellow-400 hover:bg-yellow-400/10 text-xs">Unassign</Button>
                          </div>
                        ))}
                      </div>
                      <div className="text-right text-sm text-gray-400 mt-2">
                        {table.guests.length} / {table.capacity} seats filled
                      </div>
                    </div>
                  ))}
                </div>
                <Button onClick={addTable} className="mt-4">Add Table</Button>
                <Button onClick={exportToCSV} className="mt-4 ml-4"><Download size={18} className="mr-2" /> Export CSV</Button>
              </div>
            </motion.div>
          </div>

          <div className="mt-16 bg-[#2A2E39] p-8 rounded-xl">
            <h3 className="text-2xl font-serif font-bold text-gold mb-4">How to Use</h3>
            <ul className="list-disc list-inside space-y-2 text-gray-300">
              <li>Paste your guest list into the text area, with one name per line, and click "Process Guest List".</li>
              <li>Your guests will appear in the "Unassigned Guests" panel.</li>
              <li>Use the "Add Table" button to create tables. Adjust their names and capacities as needed.</li>
              <li>Use the dropdown menu on each table to assign guests from the unassigned list.</li>
              <li>Check the "Unassigned Guests" list to ensure everyone has a seat.</li>
              <li>Export your final seating plan as a CSV file.</li>
            </ul>
            <Link to="/resources" className="inline-flex items-center mt-6 text-gold hover:text-white">
              <ArrowLeft size={18} className="mr-2" />
              Back to Resources
            </Link>
          </div>
        </div>
      </div>
    </>
  );
};

export default SeatingPlanner;